apiVersion: v1
kind: ConfigMap
metadata:
  name: nsenter-actions
  labels:
    app: nsenter
data:
  donothing: |
    #!/usr/bin/env bash
    set -x

    if [[ -f /opt/sentinel ]]; then
      if [[ ! -z "$1" ]]; then
        echo "received positional argument, forcing cleanup"
        rm /opt/sentinel || true
      else
        echo "Already ran, exiting"
        exit 0
      fi
    fi

    echo "Doing nothing, dropping sentinel, and rebooting once"
    touch /opt/sentinel
    reboot now
  clear_cache: |
    #!/usr/bin/env bash
    set -x

    if [[ -f /opt/cleared ]]; then
      if [[ ! -z "$1" ]]; then
        echo "received positional argument, forcing cleanup"
        rm /opt/cleared || true
      else
        echo "Already ran, exiting"
        exit 0
      fi
    fi

    echo "Checking free memory"
    free -h

    echo "Clearing caches"
    sync; echo 3 > /proc/sys/vm/drop_caches

    echo "Checking free memory after cache drop"
    free -h

    echo "Dropping sentinel file"
    touch /opt/cleared

    reboot now
  scheduler_mq_deadline: |
    #!/usr/bin/env bash
    set -ux

    echo "Checking current scheduler"
    if [[ -f /sys/block/sda/queue/scheduler ]]; then
      FOUND="$(cat /sys/block/sda/queue/scheduler | grep "\[mq-deadline\]")"
      if [[ -n "${FOUND}" ]]; then
        echo "Found scheduler already, will exit if permanently set"
      fi
      FOUND="$(cat /boot/grub/grub.cfg | grep "elevator=mq-deadline")"
      if [[ -n "${FOUND}" ]]; then
        echo "elevator permanently set, will exit early"
        exit 0
      fi
    fi
    
    echo "Setting io scheduler"
    echo "mq-deadline" > /sys/block/sda/queue/scheduler
  
    echo "Set scheduler, reading back for sanity"
    cat /sys/block/sda/queue/scheduler

    FOUND="$(cat /sys/block/sda/queue/scheduler | grep "\[mq-deadline\]")"
    if [[ -z "${FOUND}" ]]; then
      echo "Expected to find scheduler mq-deadline, but instead found: '$FOUND'"
    fi

    echo "Permanently setting scheduler"
    echo 'GRUB_CMDLINE_LINUX_DEFAULT="console=tty1 console=ttyS0 earlyprintk=ttyS0 elevator=mq-deadline"' > /etc/default/grub.d/60-aks-dropin.cfg
  
    echo "Updating grub"
    update-grub

    echo "Grub updated, logging new boot config"
    cat /boot/grub/grub.cfg

    FOUND="$(cat /boot/grub/grub.cfg | grep "elevator=mq-deadline")"
    if [[ -z "${FOUND}" ]]; then
      echo "Expected to find elevator mq-deadline, was not present"
    fi

    reboot now
  scheduler_noop: |
    #!/usr/bin/env bash
    set -ux

    echo "Checking current scheduler"
    if [[ -f /sys/block/sda/queue/scheduler ]]; then
      FOUND=$(cat /sys/block/sda/queue/scheduler | grep "\[none\]")
      if [[ -n "${FOUND}" ]]; then
        echo "Found none scheduler already, will exit if permanently set"
      fi
      FOUND="$(cat /boot/grub/grub.cfg | grep "elevator=noop")"
      if [[ -n "${FOUND}" ]]; then
        echo "elevator permanently set, will exit early"
        exit 0
      fi
    fi
    
    echo "Setting io scheduler"
    echo "none" > /sys/block/sda/queue/scheduler
  
    echo "Set scheduler, reading back for sanity"
    cat /sys/block/sda/queue/scheduler

    FOUND="$(cat /sys/block/sda/queue/scheduler | grep "\[none\]")"
    if [[ -z "${FOUND}" ]]; then
      echo "Expected to find scheduler none, but instead found: '$FOUND'"
    fi

    echo "Permanently setting scheduler"
    echo 'GRUB_CMDLINE_LINUX_DEFAULT="console=tty1 console=ttyS0 earlyprintk=ttyS0 elevator=noop"' > /etc/default/grub.d/60-aks-dropin.cfg
  
    echo "Updating grub"
    update-grub

    echo "Grub updated, logging new boot config"
    cat /boot/grub/grub.cfg

    FOUND="$(cat /boot/grub/grub.cfg | grep "elevator=noop")"
    if [[ -z "${FOUND}" ]]; then
      echo "Expected to find elevator noop, but was not present"
    fi

    reboot now

  test1_original: |-
    #!/usr/bin/env bash
    set -x

    if [[ -f /opt/sentinel ]]; then
      if [[ ! -z "$1" ]]; then
        echo "received positional argument, forcing cleanup"
        rm /opt/sentinel || true
      else
        echo "Already ran, exiting"
        exit 0
      fi
    fi

    echo "Doing nothing, dropping sentinel, and rebooting once"
    touch /opt/sentinel
    reboot now

  test2_kubeslice_upper: |-
    kube_slice_file="/etc/systemd/system/kubereserved.slice"
    system_slice_dropin="/etc/systemd/system.control/system.slice.d/50-Resources.conf"
    kubelet_dropin_file="/etc/systemd/system/kubelet.service.d/10-kubereserved-slice.conf"
    containerd_dropin_file="/etc/systemd/system/containerd.service.d/10-kubereserved-slice.conf"
    kube_slice_name="$(basename "${kube_slice_file}")"
    for f in "${kube_slice_file}" "${system_slice_dropin}" "${kubelet_dropin_file}" "${containerd_dropin_file}"; do
      mkdir -p "$(dirname "${f}")"
    done

    if [[ -f "${containerd_dropin_file}" ]]; then
      if [[ ! -z "$1" ]]; then
        echo "received positional argument, forcing run"
      else
        echo "Already ran, exiting"
        exit 0
      fi
    fi

    tee "${kube_slice_file}" > /dev/null <<'EOF'
    # This is a transient unit file, created programmatically via the systemd API. Do not edit.
    [Unit]
    Description=kubelet containerd slice
    Wants=-.slice

    [Slice]
    MemoryAccounting=yes
    CPUAccounting=yes
    IOAccounting=yes
    TasksAccounting=yes

    [Unit]
    DefaultDependencies=no

    [Slice]
    CPUWeight=10000
    MemoryMax=infinity
    MemoryMin=915000000
    MemoryLow=915000000
    TasksMax=infinity
    IODeviceLatencyTargetSec="/dev/sda 25ms"
    EOF

    tee "${system_slice_dropin}" > /dev/null <<'EOF'
    [Slice]
    CPUWeight=5000
    MemoryMax=infinity
    TasksMax=infinity
    IODeviceLatencyTargetSec=
    IODeviceLatencyTargetSec=/dev/sda 25ms
    EOF

    tee "${kubelet_dropin_file}" > /dev/null <<EOF
    [Service]
    Slice="${kube_slice_name}"
    EOF

    tee "${containerd_dropin_file}" > /dev/null <<EOF
    [Service]
    Slice="${kube_slice_name}"
    EOF

    # maybe easiest to kick all processes
    reboot now

  test2_kubeslice_lower: |-
    kube_slice_file="/etc/systemd/system/kubereserved.slice"
    system_slice_dropin="/etc/systemd/system.control/system.slice.d/50-Resources.conf"
    kubelet_dropin_file="/etc/systemd/system/kubelet.service.d/10-kubereserved-slice.conf"
    containerd_dropin_file="/etc/systemd/system/containerd.service.d/10-kubereserved-slice.conf"
    kube_slice_name="$(basename "${kube_slice_file}")"
    for f in "${kube_slice_file}" "${system_slice_dropin}" "${kubelet_dropin_file}" "${containerd_dropin_file}"; do
      mkdir -p "$(dirname "${f}")"
    done

    if [[ -f "${containerd_dropin_file}" ]]; then
      if [[ ! -z "$1" ]]; then
        echo "received positional argument, forcing run"
      else
        echo "Already ran, exiting"
        exit 0
      fi
    fi

    tee "${kube_slice_file}" > /dev/null <<'EOF'
    # This is a transient unit file, created programmatically via the systemd API. Do not edit.
    [Unit]
    Description=kubelet containerd slice
    Wants=-.slice

    [Slice]
    MemoryAccounting=yes
    CPUAccounting=yes
    IOAccounting=yes
    TasksAccounting=yes

    [Unit]
    DefaultDependencies=no

    [Slice]
    CPUWeight=10000
    MemoryMax=infinity
    MemoryMin=261000000
    MemoryLow=261000000
    TasksMax=infinity
    IODeviceLatencyTargetSec="/dev/sda 25ms"
    EOF

    tee "${system_slice_dropin}" > /dev/null <<'EOF'
    [Slice]
    CPUWeight=5000
    MemoryMax=infinity
    TasksMax=infinity
    IODeviceLatencyTargetSec=
    IODeviceLatencyTargetSec=/dev/sda 25ms
    EOF

    tee "${kubelet_dropin_file}" > /dev/null <<EOF
    [Service]
    Slice="${kube_slice_name}"
    EOF

    tee "${containerd_dropin_file}" > /dev/null <<EOF
    [Service]
    Slice="${kube_slice_name}"
    EOF

    # maybe easiest to kick all processes
    reboot now

  test3_systemslice: |-
    system_slice_dropin="/etc/systemd/system.control/system.slice.d/50-Resources.conf"
    kubelet_dropin_file="/etc/systemd/system/kubelet.service.d/10-kubereserved-slice.conf"
    containerd_dropin_file="/etc/systemd/system/containerd.service.d/10-kubereserved-slice.conf"

    tee "${system_slice_dropin}" > /dev/null <<'EOF'
    [Slice]
    CPUWeight=5000
    MemoryMax=infinity
    TasksMax=infinity
    MemoryMin=915000000
    MemoryLow=915000000
    IODeviceLatencyTargetSec=
    IODeviceLatencyTargetSec=/dev/sda 25ms
    EOF

    tee "${kubelet_dropin_file}" > /dev/null <<EOF
    [Service]
    CPUAccounting=yes
    MemoryAccounting=yes
    TasksAccounting=yes
    EOF

    tee "${containerd_dropin_file}" > /dev/null <<EOF
    [Service]
    CPUAccounting=yes
    MemoryAccounting=yes
    TasksAccounting=yes
    EOF

    # maybe easiest to kick all processes
    reboot now

  test4_kubelet: |-
    system_slice_dropin="/etc/systemd/system.control/system.slice.d/50-Resources.conf"
    kubelet_dropin_file="/etc/systemd/system/kubelet.service.d/10-kubereserved-slice.conf"
    containerd_dropin_file="/etc/systemd/system/containerd.service.d/10-kubereserved-slice.conf"

    tee "${system_slice_dropin}" > /dev/null <<'EOF'
    [Slice]
    CPUWeight=5000
    MemoryMax=infinity
    TasksMax=infinity
    IODeviceLatencyTargetSec=
    IODeviceLatencyTargetSec=/dev/sda 25ms
    EOF

    tee "${kubelet_dropin_file}" > /dev/null <<EOF
    [Service]
    CPUAccounting=yes
    MemoryAccounting=yes
    TasksAccounting=yes

    MemoryMin=300000000
    MemoryLow=300000000
    EOF

    tee "${containerd_dropin_file}" > /dev/null <<EOF
    [Service]
    CPUAccounting=yes
    MemoryAccounting=yes
    TasksAccounting=yes
    EOF

    # maybe easiest to kick all processes
    reboot now
